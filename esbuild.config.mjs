import esbuild from "esbuild";
import process from "process";
import os from "os"; // 引入 os 模块以检测操作系统
import builtins from "builtin-modules";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

// 判断当前环境是否为生产环境
const prod = process.argv[2] === "production";

// 检测操作系统类型
const isMACOS = os.platform() === "darwin";

// 根据操作系统设置输出文件名
const outfile = isMACOS
	? `${os.homedir()}/Nextcloud/knowledge-warehouse/.obsidian/plugins/obsidian-content-style-manager/main.js`
	: "main.js";

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	format: "cjs", // 输出格式为 CommonJS
	target: "es2018", // 编译目标
	logLevel: "info", // 日志级别
	sourcemap: prod ? false : "inline", // 生成 source map，用于调试
	treeShaking: true, // 启用 tree shaking
	outfile: outfile, // 输出文件路径，根据操作系统设置
});

// 根据环境决定是否进行文件监听
if (prod) {
	// 生产环境下只执行一次构建
	await context.rebuild();
	process.exit(0); // 退出进程
} else {
	// 开发环境下启用文件监听
	await context.watch();
}
